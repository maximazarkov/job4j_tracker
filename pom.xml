<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- Версия модели описания  Maven. Это не версия maven, а именно модель. -->
	<!-- Версия Maven: 3.х. Версия модели maven: 4.0.0 -->
	<!-- modelVersion укахывает, как Maven должен интерпретировать pom.xml. -->
	<modelVersion>4.0.0</modelVersion>
    <!-- укажем наш сайт - группировка библиотек, например, Job4j.ru выпускает несколько продуктов и мы хотим, чтобы эти проекты все лежали в одной папке ru.job4j. В java обычно используют имя домена, хотя имяможет быть любым. -->
	<groupId>ru.job4j</groupId>
	<!-- в артефакте указывают название проекта, например, java-a-to-z или junior -->
	<!-- artifactId - уникальный ключ нашей библиоткив. Уникальность должна обеспечиваться сочетанием двух ключей groupId и artifactId. -->
    <artifactId>job4j_tracker</artifactId>
	<!-- здесь мы указываем, как мы собираем проект, например в jar, ear, war
	или указать pom, если данный pom.xml является родителем для других модулей -->
    <packaging>jar</packaging>
	<!-- укажем версию проекта или библиотеки -->
    <version>2.0</version>
	<!-- имя проекта -->
    <name>job4j_tracker</name>
	<!-- доменное имя проекта -->
	<!-- сочетание groupId + artifactId + version - позволяют найти нужную библиотеку и загрузить ее в проект. -->
    <url>http://job4j.ru</url>

	<!-- настройка окружения пакета -->
    <properties>
            <!-- пропишем версию компилятора, которая должна выполнятся в среде программирования -->
		<!-- версия компилятора -->
            <maven.compiler.source>16</maven.compiler.source>
           <!-- версия для компилированных файлов -->
            <maven.compiler.target>16</maven.compiler.target>
           <!-- кодировка -->
          <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

      <!-- подключим все подпроекты (дочерние pom) -->
    <!--
    <modules>
        <module>tracker</module>
    </modules>
-->

	<!-- подключим сторонние библиотеки, которые будут нужны в проекте -->
    <dependencies>
		<!-- библиотека для тестирования -->
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-all</artifactId>
            <version>1.3</version>
            <scope>test</scope>
        </dependency>
		<!-- библиотека для тестирования -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.1</version>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.2.18</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/log4j/log4j -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.17</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.30</version>
        </dependency>
    </dependencies>

	<!-- подключитм плагины для maven -->
	<!-- Петр обещал про плагины снять отдельное видео -->
	<build>
        <plugins>
            <!-- плагин JaCoCo -->
            <plugin>
                <!-- версия плагина -->
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.4</version>
                <executions>
                    <!-- настройка запуска задачи анализа кода на покрытие -->
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <!-- настройка запуска задачи проверки кода после запуска команды mvn test. -->
                    <execution>
                        <id>report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- плагины maven -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.7.0</version>
                <configuration>
                    <source>11</source>
                    <target>11</target>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.ow2.asm</groupId>
                        <artifactId>asm</artifactId>
                        <version>6.2</version>
                    </dependency>
                </dependencies>
            </plugin>

			<!-- плагин для сборки javadoc -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.0.0</version>
            </plugin>
			<!-- плагин для checkstyle -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
				<version>2.17</version>
				<executions>
					<execution>
						<id>validate</id>
						<phase>validate</phase>
						<configuration>
							<configLocation>checkstyle.xml</configLocation>
							<encoding>UTF-8</encoding>
							<consoleOutput>true</consoleOutput>
							<failsOnError>true</failsOnError>
							<includeTestSourceDirectory>true</includeTestSourceDirectory>
						</configuration>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
    </build>
</project>

