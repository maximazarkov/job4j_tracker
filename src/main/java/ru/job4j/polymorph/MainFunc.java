package ru.job4j.polymorph;

/**
 * Пример конфликта, когда имплементируется два интерфейса с одинаковыми дефолтными методами
 * в интерфейсах. Это происходит, так как возникает конфликт имен. При создании объекта MainFunc
 * и вызове у него метода func() возникнет неопределенность - программа не поймет, метод какого
 * из интерфейсов нужно вызвать.
 * Чтобы исправить ситуацию и все таки имплементировать оба интерфейса, нужно переопределить
 * метод func() в классе MainFunc. Например, можно выбрать метод одного из интерфейсов и вызвать
 * его, используя имя интерфейса и ключевое слово super через точку, то есть указать компилятору
 * откуда конкретно нужно вызвать метод.
 * Рассмотрим еще одну ситуацию. Добавим в интерфейсы Func1, Func2 дефолтные методы funcMessage()
 * с одинаковой сигнатурой и унаследуем Func2 от Func1.
 *Создаем класс MainFuncMsg, в нем в методе main() создаём объект FuncMsg и вызываем у него метод
 *  funcMessage().
 * Появляется вопрос - метод какого из интерфейсов будет вызван? Тут всё просто, вызывается метод
 * ближайшего интерфейса в цепочке наследования. В нашем случае цепочка такая:
 * Func1 -> Func2 -> FuncMsg, поэтому будет вызван метод интерфейса Func2.
  */
public class MainFunc implements Func1, Func2 {
    @Override
    public double func(double x, double y) {
        return Func2.super.func(x, y);
    }
}
